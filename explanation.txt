Here's how you can make this work. I'll be using Flask for this example.

First, you'll have to modify your python script by wrapping it up in a new Flask app and adding a route that will respond with book recommendations in JSON format.

```python
# rest of your code here...

from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/recommendations', methods=['POST'])
def get_recommendations():
    mood = (request.json)['mood']
    mood = mood.capitalize()

    if mood not in data['mood'].unique():
        response = {"message": "Invalid mood. Please enter a valid mood from the list."}
        return jsonify(response), 400
    else:
        recommendations = recommend_books(mood, similarity_matrix)
        response = recommendations[['title', 'author']].to_dict(orient='records')
        return jsonify(response), 200

if __name__ == "__main__":
    app.run(port=5000)
```

In the aforementioned Python code, the Flask app will start a server that is listening on port 5000 and route HTTP POST requests on path '/recommendations' to function get_recommendations() which reads mood from request body and returns book recommendations corresponding to that mood.

Next, let's add to your HTML a JavaScript code that will be responsible for sending AJAX POST request to the Flask server and updating the book recommendations in the UI dynamically.

```html
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script>
$(document).ready(function(){
  $("#moodForm").submit(function(event){
    event.preventDefault();
    var mood = $("#mood").val();
   
    $.ajax({
      url: "http://localhost:5000/recommendations",
      type: "POST",
      data: JSON.stringify({ 'mood': mood }),
      contentType: "application/json; charset=utf-8",
      dataType: "json",
      success: function(data){
        $("#book-list").empty();  // clear the old book list

        // populate the new recommendations
        $.each(data, function(index, book){
          $("#book-list").append(
            "<li>" + book['title'] + " by " + book['author'] + "</li>"
            );
        });
      },
      error: function(xhr){
        alert(xhr.responseJSON.message);
      }
    });
  });
});
</script>
```

I'm using jQuery here for neat AJAX support but this could very well be done using vanilla JavaScript or other libraries such as Axios. Remember to include this script part, preferably at the bottom of your HTML body tag.

Please, note that for the sake of simplicity I ignored potential issues such as adding a loading state or dealing with server downtime. This is a minimal working example for a production-ready application you'd probably want to handle these issues.

Also, bear in mind that the AJAX request is currently being made to "localhost:5000/recommendations". This means that the Flask server should be running on the same machine as the web browser for it to work. If you plan on deploying these applications, be sure to amend the AJAX URL to match the domain and path where the 
Flask server will be hosted.

This HTML page will:

1. Display a dropdown for mood selection.
2. On form submission, send the selected mood to the Flask server via AJAX as a HTTP POST request to the endpoint "http://localhost:5000/recommendations".
3. On a successful response, replaces the contents of your `#book-list` unordered list with the recommended books in list format.
4. If there's an error (like an invalid mood), it will alert the error message from the server.

Furthermore, the JQuery function `$.ajax()` is used to send a HTTP POST request to the Flask server and handle the response. Also `event.preventDefault();` stops the page from reloading when the form is submitted, this allows you to handle the form submission in JavaScript.

You may want to adjust the contents of the success function to include more book details as per your requirements and style the list according to your liking.

with CORS (Cross-Origin Resource Sharing), which is a mechanism that uses additional HTTP headers to allow a browser and a server to interact even when they are from different origins.

This is standard behaviour for web servers, they block frontend code from making requests to a different domain unless the server permits. But Flask development server does not allow CORS by default, so that's why you're seeing only OPTIONS requests in logs.

We'll need to use the Flask-CORS extension to handle CORS for this Flask application. Install the Flask-CORS extension using pip:

```
pip install -U flask-cors
```

Then modify your Flask application to use it:

```python
from flask import Flask, request, jsonify
from flask_cors import CORS

app = Flask(__name__)
CORS(app)  # <- add this

@app.route('/recommendations', methods=['POST'])
def get_recommendations():
    # rest of your code...

if __name__ == "__main__":
    app.run(port=5000)
```

By adding CORS(app) to your Flask application, Flask-CORS will allow
 all domains to make requests to your Flask server, eliminating the problem that might be causing the button not to work.